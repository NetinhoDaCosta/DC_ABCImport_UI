//var mijnComp = "";var mijnLayers = "";var mijnComp = app.project.activeItem;// ********************************************************************// Mijn User Intercafe opbouwen// ********************************************************************function mijnUserInterface() {    // Een functie die de interface elementen aanmaakt    res = "group{orientation:'column', alignment:['fill','fill'], alignChildren:['fill','fill'],\myImportPanel: Panel{text:'DC ABC_Import', orienttaion:'column',alignment:['fill','top'],alignChildren:['left','top'],\myPanelButton1: Button{text:'Import text from a txt file into group A, B and C'},\},\}";}function mijnUserInterfaceFuncties(myPanel) {    //een functie die defeault states aangeeft voor interface elementen en tevens de on.click functie van de button verwerkt    myPanel.grp.myImportPanel.myPanelButton1.onClick = function () {      //ABCImport();    if (mijnComp == null || (mijnComp instanceof CompItem) == false) {        alert("Please select at least one composition item." );    } else {    var AantalLayers = mijnComp.layers.length;        ABC_PreImport();    //if (AantalLayers.length ==  null){       //  alert("Please select a composition item with at least one text layer");        //} else {        //} // einde van de layer else    } // einde van de else      //alert(a);    };}function myScript(thisObj){    function myScript_buildUI(thisObj){        // een functie om de interface elementen en states samen te voegen en uit te voeren        var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette","DC_ABCImport_v1.0", undefined, {resizeable:true});        mijnUserInterface();        myPanel.grp = myPanel.add(res);        myPanel.layout.layout(true);        mijnUserInterfaceFuncties(myPanel);        // panel sizing        myPanel.layout.layout(true);        myPanel.grp.minimumSize = myPanel.grp.size;        // maak de panel resizable        myPanel.layout.resize();        myPanel.onResizing = myPanel.onResize = function() {this.layout.resize()};        return myPanel;    }    var myScriptPal = myScript_buildUI(thisObj);    if((myScriptPal != null) && (myScriptPal instanceof Window)){        myScriptPal.center();        myScriptPal.show();    }}myScript(this);// ********************************************************************// achterhalen of de comp een bepaalde naam heeft.// ********************************************************************function ABC_PreImport(){CTRL_CompTest();}function CTRL_CompTest() {    var refCompNaam = "CTRL_Comp" ;    var foundIt = false; // Het is er niet    for (var i = 1; i <= app.project.numItems; i++){    if (app.project.item(i).name == refCompNaam && app.project.item(i) instanceof CompItem ){    var mijnComp = app.project.item(i);    foundIt = true;    break;    }    }    if (foundIt){    alert("CTRL_Comp bestaat.");    ABC_Import();        } else {    alert("is is geen Comp aanwezig met de naam CTRL_Comp" );    }}function ABC_Import(){// ********************************************************************// Achterhalen wat de eerste en de tweede letters zijn van een TextLayer// ********************************************************************function eersteLetter(layerNaam) {    // eerste letter van een object weergeven    var str = layerNaam;    var res = str.charAt(0)    return res;}function tweedeLetter(layerNaam) {    // eerste letter van een object weergeven    var str = layerNaam;    var res = str.charAt(1)    return res;}function derdeLetter(layerNaam) {    // eerste letter van een object weergeven    var str = layerNaam;    var res = str.charAt(2)    return res;}// ********************************************************************// een loop door alle text layers maken en kijken naar de namen ervan // (textname properties vervolgens opslaan en array genaamd textID)// ********************************************************************var textID = new Array();//alert(mijnComp.name); function textLayersVinden() {            for (i=1 ; i <= AantalLayers ; i++){            if( (mijnComp.layer(i) instanceof TextLayer) == true) {                                layerNaam = mijnComp.layer(i).name;                var eersteTextObjectPos = (eersteLetter(layerNaam));                var tweedeTextObjectPos =(tweedeLetter(layerNaam));                var derdeTextObjectPos =(derdeLetter(layerNaam));                var IDnaam = eersteTextObjectPos + tweedeTextObjectPos + derdeTextObjectPos;            }                textID[i] = IDnaam;         }    return textID;}var textID = textLayersVinden(); // textID is een array//alert(textID);// ********************************************************************// Inhoud uit een .txt bestand inladen en opslaan in een array genaams "a"// (Deze bevat zowel een array variant als een lijst variant in leesbare vorm.)// ********************************************************************// var newFile = File.openDialog("Selecteer een txt bestand met titles" ); // open een find file dialogvar newFile = File.openDialog("Selecteer een txt bestand met titles" );if (newFile != null) {  // is er wel een file geselecteerd? (NIET null)        var a = readDocument(newFile, 0).contentAry; // we kunnen zowel onze contentAry oproepen of onze contentList die we hieronder aanmaken via de functe}  // Als ie geen file vindt dan doet het hemelaal niks, (geen else statement gemaakt)function readDocument(inputDoc, linesToSkip) {            var curDoc = new File(inputDoc);           //Een nieuwe bestand aanmaken gebaseerd op de geselecteerde input file            if (curDoc.exists){                                 // we controleren of deze bestaat  (gebeurt allemaal achter de schermen in de memory)                var contentAry = new Array();           // we maken een content array                curDoc.open("r");                               // we openen het document om deze in te lezen (in read mode "R"), schrijven is "W" mode.                while(!curDoc.eof) {                        // terwijl we NIEt aan het einde van de document zijn (eof is end of file)                    contentAry[contentAry.length] = curDoc.readln(); // lezen we elke regel van het document en slaan deze op in de zojuist aangemaakte array.                    }                    curDoc.close();                             // we sluiten vervolgens het document                }                contentAry.splice(0, linesToSkip);       // document processing (bijg evalueren of we regels willen overslaan zoals de header etc., in dat geval worden die gestript uit de array                var contentList = contentAry.join("_dpt_").toString().replace(new RegExp("_dpt_","g" ), " \r" );  // we maken vervolgens een nieuwe variabel aan , deze is gelij aan onze array, maar we gaan deze joinen (comma separated array wordt ander character) in dit geval "_dpt_". Dit voorkomt dat de script error maakt als er een komma in de tekst file zit.                contentAry = contentAry;                return{   // we krijgen de data terug of als een content array, of als een content list (voor als we later bijv de lijst willen printen, in leesbare vorm)                'contentAry': contentAry,                'contentList': contentList                } }// ********************************************************************// Een array maken van alle "hekjes" positie in de geinporteerde txt// ********************************************************************//alert(a.length);// alert(hekjesArray.hekje2);var hekjesArray = new Array()function hekjesPositie() {    // var hekjesArray={hekje1: 'value1',hekje2:'value2poep'};    //var hekjesArray = new Array()    hekjesArray["hekje1"] = "waarde 1";    hekjesArray["hekje2"] = "waarde 2";        var hekjesTemp = [];    for (i=0 ; i <=a.length ; i++){ // de sterretjes posities opslaan                if ((a[i]) === "###"){            hekjesTemp.push(i);            //alert("sterretjes" + i);            //alert(hekjesTemp);        }    }    //alert(hekjesTemp[1]);    hekjesArray["hekje1"] = hekjesTemp[0]; // Positie van eerste hekje    hekjesArray["hekje2"] = hekjesTemp[1]; // Positie van tweede hekje    var hekje1POS = hekjesArray["hekje1"];    var hekje2POS = hekjesArray["hekje2"];        return hekjesTemp;    //alert(hekje1POS);    //hekjesArray2 = [ hekjesArray["hekje1"] , hekjesArray["hekje2"] ] ;    //alert(hekjesArray2["hekje2"]);    }var h = hekjesPositie(); // Dit biedt mij een array met daarin twee index posities zoals (2, em 8);// ********************************************************************// verwijdert de eerste objecten uit een array (aantal wordt bepaald door input parameters)// ********************************************************************function dcShift(a, b) { // verwijdert de eerste objecten uit een array    // a = de array waarvan je objecten wilt deleten    // b = hoeveel plekken wil je ervan afhalen? = de lengte van een array als input    for ( j = 0 ; j <= b ; j ++) {                     a.shift() ;    } }// ********************************************************************// Drie arrays maken op basis van de geimporteerde text bestand (afgeknipt op basis van de hekjes)// ********************************************************************function txtNaarArray() {        // Argument 1 = h is een array met daarin de twee hekjes positie        // Argument 2 = is een array met daarin de textID        // Argument 3 = Een array met daarin de ingeleden data iuit de txt file                var txtArrayA = new Array();        var txtArrayB = new Array();        var txtArrayC = new Array();        var aantalZinnen = a.length;            //alert(h[0]);        var sterpositie1 = h[0];             var sterpositie2 = h[1];                for (i = 0; i < aantalZinnen ; i++ ){            if (i < sterpositie1 ) { // Een array maken voor de A groep                 txtArrayA[i] = a[i];            }                    if ((i > (sterpositie1)) && (i < (sterpositie2))) { // Een array maken voor de B groep                 txtArrayB[i] = a[i];                     //dcShift(txtArrayB, txtArrayA.length) ;                     //alert( txtArrayB[i] );                               }                 if (i > sterpositie2  ) { // Een array maken voor de C groep                txtArrayC[i] = a[i];                     var AplusBLengte =  txtArrayA.length +  txtArrayB.length;                     //alert(AplusBLengte);                     //dcShift(txtArrayC, AplusBLengte) ;                    //alert(txtArrayC[i]);            }            }   var txtArray = [txtArrayA , txtArrayB , txtArrayC]; // Een multidimensional Array met daarin drie arrays voor elk groep een eigen array.      return  txtArray;}var test = txtNaarArray();//alert(test[0][0]);// ********************************************************************// Het samenvoegen en binden van de twee arrays (de inputText array poaatsen in de juiste textlayers gebaseerd op de textID// ********************************************************************function binden(A1, A1txt) {    // A1 is een string    // A1txt is een variable    for (p=0; p < textID.length ; p++) {            if(textID[p] == A1) {                mijnComp.layer(p).property("Source Text").setValue(A1txt);        }    }}app.beginUndoGroup("DC_ABCImport");      // De "A" loopfor (a=0 ; a < test[0].length ; a++) {        var letterNr = a+1; // De A nummers beginnen niet met nul maar met 1 vandaar dat i er 1 bij optel        var letterWoord = "A" + letterNr; // Maak er A1 en A2 van etc (avhankelijk van de lengte van de A array        var letterWoordTxt = test[0][a];   // Wat wordt daadwerkelijk ingevuld in de juiste positie?        binden(letterWoord,letterWoordTxt);    } // einde van de A loop// De "B" loopvar bDelete = test[0].length;dcShift(test[1],bDelete);for (b=0 ; b < test[1].length ; b++) {        var letterNr = b+1; // De B nummers beginnen niet met nul maar met 1 vandaar dat i er 1 bij optel        var letterWoord = "B" + letterNr; // Maak er B1 en B2 van etc (avhankelijk van de lengte van de A array        var letterWoordTxt = test[1][b];   // Wat wordt daadwerkelijk ingevuld in de juiste positie?        //alert(letterWoordTxt);        binden(letterWoord,letterWoordTxt);} // einde van de B loop// De "C" loopvar cDelete = test[0].length + test[1].length + 1;dcShift(test[2],cDelete);//alert(test[2]);for (c=0 ; c < test[2].length ; c++) {        var letterNr = c+1; // De C nummers beginnen niet met nul maar met 1 vandaar dat i er 1 bij optel        var letterWoord = "C" + letterNr; // Maak er BC en BC van etc (avhankelijk van de lengte van de A array        var letterWoordTxt = test[2][c];   // Wat wordt daadwerkelijk ingevuld in de juiste positie?        //alert(letterWoordTxt);        binden(letterWoord,letterWoordTxt);} // einde cab de C loopfunction dcShift(a, b) { // verwijdert de eerste objecten uit een array    // a = de array waarvan je objecten wilt deleten    // b = hoeveel plekken wil je ervan afhalen? = de lengte van een array als input    for ( j = 0 ; j <= b ; j ++) {                     a.shift() ;    } }app.endUndoGroup();} // einde ABC_Import function